keyWord:
  step:
    - name: 直接注册并返回token
      url: /test/register
      method: POST
      body: |
        {
            "emails": "${__RandomEmail(email)}",
            "password": "${password}",
            "normalAccount": true
        }
      extractor:
        - json:
            userId: $.data[0]
            token: $.token
      assertion: [ json: { $.code: '0' } ]
    - name: 快捷注册
      url: /shadow/test/batch_register
      method: POST
      body: |
        {
            "emails": [
                "${__RandomEmail(email)}"
            ],
            "password": "${password}",
            "normalAccount": true
        }
      extractor:
        - json:
            userId: $.data[0]
      assertion: [ json: { $.code: '0' } ]
    - name: 快捷注册-合伙人邀请码-随机邮箱
      keyWord: 快捷注册
      bodyEditor:
        json:
          $.invitedCode: ${vipCode}
          $.emails:
            - ${__RandomEmail(email)}
    - name: 快捷注册-普通邀请码-随机邮箱
      keyWord: 快捷注册
      bodyEditor:
        json:
          $.invitedCode: ${link_code}
          $.emails:
            - ${__RandomEmail(email)}
    - keyWord: 快捷注册
      name: 快捷注册-非默认邀请码
      bodyEditor:
        json:
          $.invitedCode: ${not_default_vipCode}
          $.emails:
            - ${__RandomEmail(email)}
    - name: 增加合约账户资产
      url: /test/futuresproxy/inner/test/transfer
      method: POST
      headers:
        Type: query_by_uid
        Uid: ${userId}
      body: |
        {
            "uid": ${userId},
            "amount": 99999.99,
            "coin": "USDT"
        }
      assertion: [ json: { $.code: '0' } ]
    - name: 增加现货账户资产
      url: /shadow/test/asset/adjust
      method: GET
      variables:
        userId: ${userId}
        coin: ${coin}
        assetType: U_NORMAL
        amount: ${amount}
      assertion: [ json: { $.code: '0' } ]
    - name: 增加合约账户资产-指定资产
      keyWord: 增加合约账户资产
      bodyEditor:
        json:
          $.amount: ${balance_amount}
    - name: 通过uid获取用户token
      url: /shadow/test/login
      method: GET
      responseType: DEFAULT
      variables:
        userId: ${userId}
      extractor:
        - json:
            token: $.data
      assertion: [ json: { $.code: '0' } ]
    - keyWord: 通过uid获取用户token
      name: 通过uid获取带单主账户token
      variables:
        userId: ${traderParentUid}
      extractor:
        - json:
            traderParentToken: $.data
    - name: 获取带单子账户token
      url: /auth-v2/api/v2/auth/token
      method: POST
      headers:
        Token: ${traderParentToken}
      body: |
        {"showUid": ${subAccountUid}}
      extractor:
        - json:
            traderToken: $.data
      assertion: [ json: { $.code: '0' } ]
    - keyWord: 获取带单子账户token
      name: 获取跟单子账户token
      headers:
        Token: ${token}
      body: |
        {"showUid": ${followerUid}}
      extractor:
        - json:
            followerToken: $.data
    - name: 持有仓位信息
      untilWait: 2
      url: /test/futuresproxy/api/v1/position/pending
      headers:
        Type: query_by_uid
        Uid: ${userId}
      body: |
        {"uid": ${userId}}
      method: POST
      extractor:
        - json:
            position_id: $.data[0].position_id
            open_val: $.data[0].open_val
            amount: $.data[0].amount
            market: $.data[0].market
            side: $.data[0].side
      assertion: [ json: { $.code: '0' } ]
    - keyWord: 持有仓位信息
      name: 带单子账户持有仓位信息
      body: |
        {"uid": ${__showIdToUid(${subAccountUid})}}
      headers:
        Token: ${traderToken}
        Type: query_by_uid
        Uid: ${__showIdToUid(${subAccountUid})}
      extractor:
        - json:
            packing_position_id: $.data[0].position_id
            packing_amount: $.data[0].amount
            packing_market: $.data[0].market
            packing_side: $.data[0].side
    - name: 用户充值
      url: /shadow/test/userDeposit
      body: |
        {
          "uid": ${userId},
          "coinName": "USDT",
          "networkName": "TRC20",
          "cryptoType": "ERC20",
          "chainNet": "TRON",
          "transactionHash": "d829e32be84907a4dfb5bee5dcdaee6b637be287f8db52817860e7169003b92d",
          "platformId": "20240525162946000139068000007759",
          "status": "success",
          "blockNum": 61994120,
          "blockConfirmations": 3,
          "addressFrom": "TB73gtW1hsTxxA9XUYKLSJKTSHw6Jk53eH",
          "addressTo": "TPKhSAEy84qvpomF5wF7h5ih1WmbmupXor",
          "tokenAddress": "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t",
          "amount": ${__Random(1000,5000)},
          "afterAmount": 741.51748933,
          "usdtRate": 0.13351
        }
      method: POST
      assertion: [ json: { $.code: '0' } ]